# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import json
import threading
import time

from strategics import Strategics
from ImageTriggers import ImageTriggers

from loguru import logger
from PyQt5 import QtCore, QtWidgets, QtGui
from PyQt5.QtWidgets import QLabel  # , QPushButton, QMessageBox
from PyQt5.QtGui import QPixmap


class MyThread(QtCore.QThread):
    mysignal = QtCore.pyqtSignal(str)
    mysignal2 = QtCore.pyqtSignal(str)
    mysignal3 = QtCore.pyqtSignal(str)
    mysignal4 = QtCore.pyqtSignal(str)
    mysignal5 = QtCore.pyqtSignal(int)

    def __init__(
        self,
        mode,
        open_chest,
        requested_card,
        port,
        changed_account,
        change_account,
        id_card,
        total_accounts,
        play_clan_war,
        change_deck,
        number_fights_deck_change,
        send_emotion,
        reboot_index,
        android,
        forever_elexir,
        number_of_finish,
        time_break,
        open_PR,
        debug,
        token,
        tg_user,
        activ_tg_bot,
        use_chest_key,
        donate_card,
        battle_change_account,
        parent=None,
        gui=None,
    ):
        QtCore.QThread.__init__(self, parent)
        self.farm = False
        self.number_account = "0"
        self.number_deck = 5
        self._textBrowser_3 = ""
        self._textBrowser_2 = ""
        self.got_crowns = 0
        self.time_in_game = 0
        self.totall_batlles = 0
        self.cup_changes = 0
        self.bot = None
        self.time_break = time_break
        self.gui = gui

    def run(self):
        while True:
            self.sleep(1)
            self.mysignal.emit(str(self.number_account))
            self.mysignal2.emit(str(self._textBrowser_3))
            self.mysignal3.emit(str(self._textBrowser_2))
            self.mysignal4.emit(
                str(
                    f"Got Crowns {self.got_crowns}\nTotal battles {self.totall_batlles}\nTime in Game(Doesnt work) {self.time_in_game}\nTrophy changes(Doesnt work) {self.cup_changes}"
                )
            )
            self.mysignal5.emit(self.number_deck)
            if self.bot is not None and self.bot.cycleStart:
                # print(time.time() - self.bot.t)
                if self.bot.sleep:
                    # print('Бот работает')
                    if time.time() - self.bot.t > 120:
                        print("Ребут бота Rebooting bot")
                        self.bot.stopFarm()
                        # self.bot.tlgbot.restart_bot()
                        threading.Thread(target=self.bot.startFarm).start()
                else:
                    print("Бот cgbn")

    def start_farm(
        self,
        mode,
        open_chest,
        requested_card,
        port,
        changed_account,
        change_account,
        total_accounts,
        id_card,
        play_clan_war,
        change_deck,
        number_fights_deck_change,
        send_emotion,
        reboot_index,
        android,
        forever_elexir,
        number_of_finish,
        time_break,
        open_PR,
        debug,
        token,
        tg_user,
        activ_tg_bot,
        use_chest_key,
        donate_card,
        battle_change_account,
    ):
        self.time_break = time_break
        if self.farm:
            self.farm = False
            self.bot.stopFarm()
        else:
            self.farm = True
            self.bot = Strategics(
                mode,
                open_chest,
                requested_card,
                port,
                changed_account,
                change_account,
                total_accounts,
                id_card,
                play_clan_war,
                self,
                change_deck,
                number_fights_deck_change,
                send_emotion,
                reboot_index,
                android,
                forever_elexir,
                number_of_finish,
                time_break,
                open_PR,
                debug,
                token,
                tg_user,
                activ_tg_bot,
                use_chest_key,
                donate_card,
                battle_change_account,
            )
            threading.Thread(target=self.bot.startFarm).start()

    def update_server(
        self,
        mode,
        open_chest,
        requested_card,
        port,
        changed_account,
        change_account,
        total_accounts,
        id_card,
        play_clan_war,
        change_deck,
        number_fights_deck_change,
        send_emotion,
        reboot_index,
        android,
        forever_elexir,
        number_of_finish,
        time_break,
        open_PR,
        debug,
        token,
        tg_user,
        activ_tg_bot,
        use_chest_key,
        donate_card,
        battle_change_account,
    ):
        self.bot = Strategics(
            mode,
            open_chest,
            requested_card,
            port,
            changed_account,
            change_account,
            total_accounts,
            id_card,
            play_clan_war,
            self,
            change_deck,
            number_fights_deck_change,
            send_emotion,
            reboot_index,
            android,
            forever_elexir,
            number_of_finish,
            time_break,
            open_PR,
            debug,
            token,
            tg_user,
            activ_tg_bot,
            use_chest_key,
            donate_card,
            battle_change_account,
        )


class Ui_MainWindow(object):
    def __init__(self, config):
        self.config = config
        self.token = ""
        self.tg_user = ""
        self.activ_tg_bot = False
        self.farm = False
        self._textBrowser_3 = "А здесь у нас лог событий"
        self._textBrowser_2 = "Тут у нас последние результаты боев"
        self._textBrowser = (
            "Получено корон\nВремя игры\nКолличество боев\nИзменения по кубкам"
        )
        self._mode = "global"
        self._card_request = "Skeletons"
        self.request_card = False
        self.open_chest = False
        self._changed_account = False
        self.send_emotion = False
        self.forever_elexir = False
        self.port = config["port_adb"]
        self._total_accounts = 0
        self._change_account = 0
        self.id_card = 0
        self.id_card_epic = 0
        self.number_of_finish = 0
        self.time_break = 0
        self.play_clan_war = False
        self.number_fights_deck_change = 0
        self.change_deck = False
        self.deck_number = 0
        self.reboot_index = 20
        self.battle_change_account = 20
        self.android = "C:\Program Files\BlueStacks_nxt\HD-Player.exe"
        self.open_PR = False
        self.use_chest_key = False
        self.donate_card = False
        self.thread = MyThread(
            self._mode,
            self.open_chest,
            self.request_card,
            self.port,
            self._changed_account,
            self._change_account,
            self._total_accounts,
            self.id_card,
            self.play_clan_war,
            self.change_deck,
            self.number_fights_deck_change,
            self.send_emotion,
            self.reboot_index,
            self.android,
            self.forever_elexir,
            self.number_of_finish,
            self.time_break,
            self.open_PR,
            self.debug,
            self.token,
            self.tg_user,
            self.activ_tg_bot,
            self.use_chest_key,
            self.donate_card,
            self.battle_change_account,
            gui=self,
        )
        self.thread.mysignal.connect(self.on_change, QtCore.Qt.QueuedConnection)
        self.thread.mysignal2.connect(self.logEvent, QtCore.Qt.QueuedConnection)
        self.thread.mysignal3.connect(self.logCrown, QtCore.Qt.QueuedConnection)
        self.thread.mysignal4.connect(self.logStatistic, QtCore.Qt.QueuedConnection)
        self.thread.mysignal5.connect(self.on_change_2, QtCore.Qt.QueuedConnection)
        self.thread.start()
        self.bot = self.thread.bot
        self.list_mode = [
            "global",
            "mode_1",
            "mode_2",
            "2X2",
            "disabled",
            "Drop Trophy",
        ]
        self.list_change_language = [
            "",
            "English",
            "Русский",
            "Deutsch",
            "Español",
            "Français",
            "日本",
            "Italiano",
            "čeština",
            "Português",
            "中国人",
        ]

        self.list_card_request = [
            "Skeletons",
            "Ice_Spirit",
            "Fire_Spirit",
            "Electro_Spirit",
            "Goblins",
            "Bomber",
            "Spear_Goblins",
            "Bats",
            "Zap",
            "Giant_Snowball",
            "Knight",
            "Archers",
            "Minions",
            "Goblin_Gang",
            "Skeleton_Barrel",
            "Firecracker",
            "Cannon",
            "Arrows",
            "Royal_Delivery",
            "Skeleton_Dragons",
            "Mortar",
            "Tesla",
            "Barbarians",
            "Minion_Horde",
            "Rascals",
            "Royal_Giant",
            "Elite_Barbarians",
            "Royal_Delivery",
            "Heal_Spirit",
            "Ice_Golem",
            "Mega_Minion",
            "Dart_Goblin",
            "Elixir_Golem",
            "Tombstone",
            "Earthquake",
            "Valkyrie",
            "Musketeer",
            "Mini_PEKKA",
            "Hog_Rider",
            "Battle_Ram",
            "Zappies",
            "Flying_Machine",
            "Battle_Healer",
            "Bomb_Tower",
            "Furnace",
            "Goblin_Cage",
            "Fireball",
            "Giant",
            "Wizard",
            "Royal_Hogs",
            "Goblin_Hut",
            "Inferno_Tower",
            "Elixir_Collector",
            "Rocket",
            "Barbarian_Hut",
            "Three_Musketeers",
        ]

        self.list_card_request_epic = [
            "Mirror",
            "Wall_Breakers",
            "Rage",
            "Barbarian_Barrel",
            "Skeleton_Army",
            "Guards",
            "Goblin_Barrel",
            "Tornado",
            "Clone",
            "Baby_Dragon",
            "Dark_Prince",
            "Hunter",
            "Goblin_Drill",
            "Freeze",
            "Poison",
            "Balloon",
            "Witch",
            "Prince",
            "Bowler",
            "Executioner",
            "Cannon_Cart",
            "Electro_Dragon",
            "Gaint_Skeleton",
            "Goblin_Giant",
            "X-Bow",
            "Lightning",
            "Pekka",
            "Electro_Giant",
            "Golem",
        ]

        self.language = "English"
        self.language_set_words = []
        self.list_mode_bbbb = ["Until Chest Slots Full", "Until Daily Bonus Met"]

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(440, 615)
        MainWindow.setFixedSize(440, 615)
        self.MainWindow = MainWindow

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 10, 421, 601))
        self.tabWidget.setObjectName("tabWidget")

        self.Log = QtWidgets.QWidget()
        self.Log.setMinimumSize(QtCore.QSize(0, 571))
        self.Log.setObjectName("Log")

        self.pushButton = QtWidgets.QPushButton(self.Log)
        self.pushButton.setGeometry(QtCore.QRect(20, 420, 182, 61))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(lambda: self.startStopFarm())

        self.pushButton_2 = QtWidgets.QPushButton(self.Log)
        self.pushButton_2.setGeometry(QtCore.QRect(20, 490, 91, 61))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(lambda: self.getTrigger())

        self.pushButton_3 = QtWidgets.QPushButton(self.Log)
        self.pushButton_3.setGeometry(QtCore.QRect(110, 490, 91, 61))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(lambda: self.reboot())

        self.textBrowser = QtWidgets.QTextBrowser(self.Log)
        self.textBrowser.setGeometry(QtCore.QRect(210, 440, 191, 111))
        self.textBrowser.setObjectName("textBrowser")

        self.textBrowser_2 = QtWidgets.QTextBrowser(self.Log)
        self.textBrowser_2.setGeometry(QtCore.QRect(20, 291, 381, 111))
        self.textBrowser_2.setObjectName("textBrowser_2")

        self.textBrowser_3 = QtWidgets.QTextBrowser(self.Log)
        self.textBrowser_3.setGeometry(QtCore.QRect(20, 30, 381, 231))
        self.textBrowser_3.setObjectName("textBrowser_3")

        self.label_2 = QtWidgets.QLabel(self.Log)
        self.label_2.setGeometry(QtCore.QRect(210, 420, 150, 20))
        self.label_2.setObjectName("label_2")

        self.label_3 = QtWidgets.QLabel(self.Log)
        self.label_3.setGeometry(QtCore.QRect(20, 270, 150, 20))
        self.label_3.setObjectName("label_3")

        self.label_4 = QtWidgets.QLabel(self.Log)
        self.label_4.setGeometry(QtCore.QRect(20, 10, 150, 26))
        self.label_4.setObjectName("label_4")

        self.tabWidget.addTab(self.Log, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")

        self.comboBox_ = QtWidgets.QComboBox(self.tab_3)
        self.comboBox_.setGeometry(QtCore.QRect(200, 65, 151, 21))
        self.comboBox_.setObjectName("comboBox_clan_var")
        self.comboBox_.addItems(self.list_mode_bbbb)
        self.comboBox_.currentTextChanged.connect(self.debug)

        self.label_ = QtWidgets.QLabel(self.tab_3)
        self.label_.setGeometry(QtCore.QRect(10, 65, 150, 20))
        self.label_.setObjectName("label_")

        self.checkBox_openChest = QtWidgets.QCheckBox(self.tab_3)
        self.checkBox_openChest.setGeometry(QtCore.QRect(200, 100, 41, 41))
        self.checkBox_openChest.setObjectName("checkBox_openChest")
        self.checkBox_openChest.stateChanged.connect(self.openChest)

        self.label_openChest = QtWidgets.QLabel(self.tab_3)
        self.label_openChest.setGeometry(QtCore.QRect(220, 115, 150, 20))
        self.label_openChest.setObjectName("label_openChest")

        self.checkBox_PR = QtWidgets.QCheckBox(self.tab_3)
        self.checkBox_PR.setGeometry(QtCore.QRect(200, 80, 41, 41))
        self.checkBox_PR.setObjectName("checkBox_openPR")
        self.checkBox_PR.stateChanged.connect(self.openPR)

        self.label_PR = QtWidgets.QLabel(self.tab_3)
        self.label_PR.setGeometry(QtCore.QRect(220, 90, 150, 20))
        self.label_PR.setObjectName("label_PR")

        self.checkBox_use_key_chest = QtWidgets.QCheckBox(self.tab_3)
        self.checkBox_use_key_chest.setGeometry(QtCore.QRect(200, 270, 41, 41))
        self.checkBox_use_key_chest.setObjectName("checkBox_openPR")
        self.checkBox_use_key_chest.stateChanged.connect(self.d_use_key_chest)

        self.label_use_key_chest = QtWidgets.QLabel(self.tab_3)
        self.label_use_key_chest.setGeometry(QtCore.QRect(220, 280, 150, 20))
        self.label_use_key_chest.setObjectName("label_PR")

        self.checkBox_donate_card = QtWidgets.QCheckBox(self.tab_3)
        self.checkBox_donate_card.setGeometry(QtCore.QRect(10, 80, 41, 41))
        self.checkBox_donate_card.setObjectName("checkBox_openPR")
        self.checkBox_donate_card.stateChanged.connect(self.d_donate_card)

        self.label_donate_card = QtWidgets.QLabel(self.tab_3)
        self.label_donate_card.setGeometry(QtCore.QRect(30, 90, 150, 20))
        self.label_donate_card.setObjectName("label_PR")
        ############
        self.checkBox_forever_elexir = QtWidgets.QCheckBox(self.tab_3)
        self.checkBox_forever_elexir.setGeometry(QtCore.QRect(10, 270, 41, 41))
        self.checkBox_forever_elexir.setObjectName("checkBox_forever_elexir")
        self.checkBox_forever_elexir.stateChanged.connect(self._forever_elexir)

        self.label_forever_elexir = QtWidgets.QLabel(self.tab_3)
        self.label_forever_elexir.setGeometry(QtCore.QRect(30, 280, 150, 20))
        self.label_forever_elexir.setObjectName("label_forever_elexir")
        ###################
        self.checkBox_requestCard = QtWidgets.QCheckBox(self.tab_3)
        self.checkBox_requestCard.setGeometry(QtCore.QRect(10, 100, 41, 41))
        self.checkBox_requestCard.setObjectName("checkBox_requestCard")
        self.checkBox_requestCard.stateChanged.connect(self.requestCard)

        self.label_requestCard = QtWidgets.QLabel(self.tab_3)
        self.label_requestCard.setGeometry(QtCore.QRect(30, 115, 151, 20))
        self.label_requestCard.setObjectName("label_requestCard")

        self.comboBox = QtWidgets.QComboBox(self.tab_3)
        self.comboBox.setGeometry(QtCore.QRect(200, 30, 151, 21))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItems(self.list_mode)
        self.comboBox.currentTextChanged.connect(self.currentTextComboBox_1)

        self.label_5 = QtWidgets.QLabel(self.tab_3)
        self.label_5.setGeometry(QtCore.QRect(10, 35, 150, 20))
        self.label_5.setObjectName("label_5")

        self.comboBox_2 = QtWidgets.QComboBox(self.tab_3)
        self.comboBox_2.setGeometry(QtCore.QRect(200, 135, 151, 21))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItems(self.list_card_request)
        self.comboBox_2.currentTextChanged.connect(self.currentTextComboBox_2)

        self.label_img = QLabel(self.tab_3)
        self.label_img.move(360, 100)
        self.label_img.resize(50, 50)

        ############################

        self.comboBox_2_epic = QtWidgets.QComboBox(self.tab_3)
        self.comboBox_2_epic.setGeometry(QtCore.QRect(200, 175, 151, 21))
        self.comboBox_2_epic.setObjectName("comboBox_2")
        self.comboBox_2_epic.addItems(self.list_card_request_epic)
        self.comboBox_2_epic.currentTextChanged.connect(self.currentTextComboBox_0000)

        self.label_img_epic = QLabel(self.tab_3)
        self.label_img_epic.move(360, 170)
        self.label_img_epic.resize(50, 50)

        self.label_epic = QtWidgets.QLabel(self.tab_3)
        self.label_epic.setGeometry(QtCore.QRect(10, 175, 150, 20))
        self.label_epic.setObjectName("label_epic")

        ####################################

        self.comboBox_change_language = QtWidgets.QComboBox(self.tab_3)
        self.comboBox_change_language.setGeometry(QtCore.QRect(200, 210, 151, 21))
        self.comboBox_change_language.setObjectName("comboBox_change_language")
        self.comboBox_change_language.addItems(self.list_change_language)
        self.comboBox_change_language.currentTextChanged.connect(
            self.currentTextComboBox_change_language
        )

        self.label_change_language = QtWidgets.QLabel(self.tab_3)
        self.label_change_language.setGeometry(QtCore.QRect(10, 215, 150, 20))
        self.label_change_language.setObjectName("label_change_language")

        self.label_8 = QtWidgets.QLabel(self.tab_3)
        self.label_8.setGeometry(QtCore.QRect(10, 140, 150, 20))
        self.label_8.setObjectName("label_8")

        self.checkBox_clan_var = QtWidgets.QCheckBox(self.tab_3)
        self.checkBox_clan_var.setGeometry(QtCore.QRect(10, 240, 41, 41))
        self.checkBox_clan_var.setObjectName("checkBox_clan_var")
        self.checkBox_clan_var.stateChanged.connect(self.clan_war)

        self.label_clan_var = QtWidgets.QLabel(self.tab_3)
        self.label_clan_var.setGeometry(QtCore.QRect(30, 250, 150, 20))
        self.label_clan_var.setObjectName("label_clan_var")

        self.checkBox_shop_reward = QtWidgets.QCheckBox(self.tab_3)
        self.checkBox_shop_reward.setGeometry(QtCore.QRect(200, 240, 150, 41))
        self.checkBox_shop_reward.setObjectName("checkBox_shop_reward")
        self.checkBox_shop_reward.stateChanged.connect(self.debug)

        self.tabWidget.addTab(self.tab_3, "")

        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")

        self.lineEdit = QtWidgets.QLineEdit(self.tab_4)
        self.lineEdit.setGeometry(QtCore.QRect(20, 20, 111, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.textChanged.connect(self.adbPort)

        self.lineEdit_android = QtWidgets.QLineEdit(self.tab_4)
        self.lineEdit_android.setGeometry(QtCore.QRect(20, 50, 250, 20))
        self.lineEdit_android.setObjectName("lineEdit")
        self.lineEdit_android.textChanged.connect(self._android)

        self.label_android = QtWidgets.QLabel(self.tab_4)
        self.label_android.setGeometry(QtCore.QRect(280, 50, 150, 20))
        self.label_android.setObjectName("label_android")

        self.spinBox = QtWidgets.QSpinBox(self.tab_4)
        self.spinBox.setGeometry(QtCore.QRect(20, 80, 111, 25))
        self.spinBox.setObjectName("spinBox")
        self.spinBox.valueChanged.connect(self.numberOfFinish)

        self.label_9 = QtWidgets.QLabel(self.tab_4)
        self.label_9.setGeometry(QtCore.QRect(170, 30, 150, 20))
        self.label_9.setObjectName("label_9")

        self.label_10 = QtWidgets.QLabel(self.tab_4)
        self.label_10.setGeometry(QtCore.QRect(170, 80, 150, 20))
        self.label_10.setObjectName("label_10")

        self.label_11 = QtWidgets.QLabel(self.tab_4)
        self.label_11.setGeometry(QtCore.QRect(170, 130, 150, 20))
        self.label_11.setObjectName("label_11")

        self.spinBox_2 = QtWidgets.QSpinBox(self.tab_4)
        self.spinBox_2.setGeometry(QtCore.QRect(20, 120, 111, 25))
        self.spinBox_2.setObjectName("spinBox_2")
        self.spinBox_2.valueChanged.connect(self.timeBreak)

        self.checkBox_changed_account = QtWidgets.QCheckBox(self.tab_4)
        self.checkBox_changed_account.setGeometry(QtCore.QRect(20, 160, 41, 41))
        self.checkBox_changed_account.setObjectName("checkBox_changed_account")
        self.checkBox_changed_account.stateChanged.connect(self.changed_account)

        self.label_changed_account = QtWidgets.QLabel(self.tab_4)
        self.label_changed_account.setGeometry(QtCore.QRect(170, 180, 150, 20))
        self.label_changed_account.setObjectName("label_change_account")

        self.spinBox_change_account = QtWidgets.QSpinBox(self.tab_4)
        self.spinBox_change_account.setGeometry(QtCore.QRect(20, 200, 111, 25))
        self.spinBox_change_account.setObjectName("spinBox_change_account")
        self.spinBox_change_account.valueChanged.connect(self.set_change_account)

        self.label_change_account = QtWidgets.QLabel(self.tab_4)
        self.label_change_account.setGeometry(QtCore.QRect(170, 205, 150, 20))
        self.label_change_account.setObjectName("label_change_account")

        self.spinBox_battle_change_account = QtWidgets.QSpinBox(self.tab_4)
        self.spinBox_battle_change_account.setGeometry(QtCore.QRect(20, 235, 111, 25))
        self.spinBox_battle_change_account.setObjectName("spinBox_change_account")
        self.spinBox_battle_change_account.valueChanged.connect(self.set_battle_change_account)

        self.label_battle_change_account = QtWidgets.QLabel(self.tab_4)
        self.label_battle_change_account.setGeometry(QtCore.QRect(170, 235, 150, 20))
        self.label_battle_change_account.setObjectName("label_change_account")

        self.spinBox_total_accounts = QtWidgets.QSpinBox(self.tab_4)
        self.spinBox_total_accounts.setGeometry(QtCore.QRect(20, 270, 111, 25))
        self.spinBox_total_accounts.setObjectName("spinBox_total_accounts")
        self.spinBox_total_accounts.valueChanged.connect(self.set_total_accounts)

        ###########

        self.checkBox_change_deck = QtWidgets.QCheckBox(self.tab_4)
        self.checkBox_change_deck.setGeometry(QtCore.QRect(20, 310, 41, 41))
        self.checkBox_change_deck.setObjectName("checkBox_change_deck")
        self.checkBox_change_deck.stateChanged.connect(self._checkBox_change_deck)

        self.label_change_deck = QtWidgets.QLabel(self.tab_4)
        self.label_change_deck.setGeometry(QtCore.QRect(170, 320, 150, 20))
        self.label_change_deck.setObjectName("label_change_deck")

        self.spinBox_deck_number = QtWidgets.QSpinBox(self.tab_4)
        self.spinBox_deck_number.setGeometry(QtCore.QRect(20, 360, 111, 25))
        self.spinBox_deck_number.setObjectName("spinBox_deck_number")
        self.spinBox_deck_number.valueChanged.connect(self._spinBox_deck_number)

        self.label_deck_number = QtWidgets.QLabel(self.tab_4)
        self.label_deck_number.setGeometry(QtCore.QRect(170, 360, 150, 20))
        self.label_deck_number.setObjectName("label_deck_number")

        self.spinBox_number_fights_deck_change = QtWidgets.QSpinBox(self.tab_4)
        self.spinBox_number_fights_deck_change.setGeometry(
            QtCore.QRect(20, 400, 111, 25)
        )
        self.spinBox_number_fights_deck_change.setObjectName(
            "spinBox_number_fights_deck_change"
        )
        self.spinBox_number_fights_deck_change.valueChanged.connect(
            self._spinBox_number_fights_deck_change
        )

        self.label_number_fights_deck_change = QtWidgets.QLabel(self.tab_4)
        self.label_number_fights_deck_change.setGeometry(
            QtCore.QRect(170, 400, 150, 20)
        )
        self.label_number_fights_deck_change.setObjectName(
            "label_number_fights_deck_change"
        )

        self.checkBox_send_emotion = QtWidgets.QCheckBox(self.tab_4)
        self.checkBox_send_emotion.setGeometry(QtCore.QRect(20, 440, 41, 41))
        self.checkBox_send_emotion.setObjectName("checkBox_send_emotion")
        self.checkBox_send_emotion.stateChanged.connect(self._checkBox_send_emotion)

        self.label_send_emotion = QtWidgets.QLabel(self.tab_4)
        self.label_send_emotion.setGeometry(QtCore.QRect(170, 450, 150, 20))
        self.label_send_emotion.setObjectName("label_send_emotion")

        self.checkBox_debug = QtWidgets.QCheckBox(self.tab_4)
        self.checkBox_debug.setGeometry(QtCore.QRect(20, 470, 41, 41))
        self.checkBox_debug.setObjectName("checkBox_send_emotion")
        self.checkBox_debug.stateChanged.connect(self._checkBox_debug)

        self.label_debug = QtWidgets.QLabel(self.tab_4)
        self.label_debug.setGeometry(QtCore.QRect(170, 480, 150, 20))
        self.label_debug.setObjectName("label_debug")

        ##########

        self.label_total_accounts = QtWidgets.QLabel(self.tab_4)
        self.label_total_accounts.setGeometry(QtCore.QRect(170, 270, 150, 20))
        self.label_total_accounts.setObjectName("label_changeAccount")

        self.tabWidget.addTab(self.tab_4, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")

        self.pushButton_5 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_5.setGeometry(QtCore.QRect(10, 10, 71, 31))
        self.pushButton_5.setObjectName("pushButton_5")

        self.pushButton_6 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_6.setGeometry(QtCore.QRect(90, 10, 71, 31))
        self.pushButton_6.setObjectName("pushButton_6")

        self.pushButton_7 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_7.setGeometry(QtCore.QRect(170, 10, 71, 31))
        self.pushButton_7.setObjectName("pushButton_7")

        self.pushButton_8 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_8.setGeometry(QtCore.QRect(250, 10, 71, 31))
        self.pushButton_8.setObjectName("pushButton_8")

        self.pushButton_9 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_9.setGeometry(QtCore.QRect(330, 10, 71, 31))
        self.pushButton_9.setObjectName("pushButton_9")

        self.pushButton_10 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_10.setGeometry(QtCore.QRect(10, 50, 71, 31))
        self.pushButton_10.setObjectName("pushButton_10")

        self.pushButton_11 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_11.setGeometry(QtCore.QRect(90, 50, 71, 31))
        self.pushButton_11.setObjectName("pushButton_11")

        self.pushButton_12 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_12.setGeometry(QtCore.QRect(170, 50, 71, 31))
        self.pushButton_12.setObjectName("pushButton_12")

        self.pushButton_13 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_13.setGeometry(QtCore.QRect(250, 50, 71, 31))
        self.pushButton_13.setObjectName("pushButton_13")

        self.pushButton_14 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_14.setGeometry(QtCore.QRect(330, 50, 71, 31))
        self.pushButton_14.setObjectName("pushButton_14")

        self.pushButton_15 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_15.setGeometry(QtCore.QRect(10, 90, 71, 31))
        self.pushButton_15.setObjectName("pushButton_15")

        self.pushButton_16 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_16.setGeometry(QtCore.QRect(90, 90, 71, 31))
        self.pushButton_16.setObjectName("pushButton_16")

        self.pushButton_17 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_17.setGeometry(QtCore.QRect(170, 90, 71, 31))
        self.pushButton_17.setObjectName("pushButton_17")

        self.pushButton_18 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_18.setGeometry(QtCore.QRect(250, 90, 71, 31))
        self.pushButton_18.setObjectName("pushButton_18")

        self.pushButton_19 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_19.setGeometry(QtCore.QRect(330, 90, 71, 31))
        self.pushButton_19.setObjectName("pushButton_19")

        self.pushButton_20 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_20.setGeometry(QtCore.QRect(10, 130, 71, 31))
        self.pushButton_20.setObjectName("pushButton_20")

        self.pushButton_21 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_21.setGeometry(QtCore.QRect(90, 130, 71, 31))
        self.pushButton_21.setObjectName("pushButton_21")

        self.pushButton_22 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_22.setGeometry(QtCore.QRect(170, 130, 71, 31))
        self.pushButton_22.setObjectName("pushButton_22")

        self.pushButton_23 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_23.setGeometry(QtCore.QRect(250, 130, 71, 31))
        self.pushButton_23.setObjectName("pushButton_23")

        self.pushButton_24 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_24.setGeometry(QtCore.QRect(330, 130, 71, 31))
        self.pushButton_24.setObjectName("pushButton_24")

        self.pushButton_25 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_25.setGeometry(QtCore.QRect(10, 170, 71, 31))
        self.pushButton_25.setObjectName("pushButton_25")

        self.pushButton_26 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_26.setGeometry(QtCore.QRect(90, 170, 71, 31))
        self.pushButton_26.setObjectName("pushButton_26")

        self.pushButton_27 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_27.setGeometry(QtCore.QRect(170, 170, 71, 31))
        self.pushButton_27.setObjectName("pushButton_27")

        self.pushButton_28 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_28.setGeometry(QtCore.QRect(250, 170, 71, 31))
        self.pushButton_28.setObjectName("pushButton_28")

        self.pushButton_29 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_29.setGeometry(QtCore.QRect(330, 170, 71, 31))
        self.pushButton_29.setObjectName("pushButton_29")

        self.pushButton_30 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_30.setGeometry(QtCore.QRect(10, 210, 71, 31))
        self.pushButton_30.setObjectName("pushButton_30")

        self.pushButton_31 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_31.setGeometry(QtCore.QRect(90, 210, 71, 31))
        self.pushButton_31.setObjectName("pushButton_31")

        self.pushButton_32 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_32.setGeometry(QtCore.QRect(170, 210, 71, 31))
        self.pushButton_32.setObjectName("pushButton_32")

        self.pushButton_33 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_33.setGeometry(QtCore.QRect(250, 210, 71, 31))
        self.pushButton_33.setObjectName("pushButton_33")

        self.pushButton_34 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_34.setGeometry(QtCore.QRect(330, 210, 71, 31))
        self.pushButton_34.setObjectName("pushButton_34")

        self.pushButton_69 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_69.setGeometry(QtCore.QRect(250, 250, 71, 31))
        self.pushButton_69.setObjectName("pushButton_69")

        self.pushButton_70 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_70.setGeometry(QtCore.QRect(10, 250, 71, 31))
        self.pushButton_70.setObjectName("pushButton_70")

        self.pushButton_71 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_71.setGeometry(QtCore.QRect(90, 250, 71, 31))
        self.pushButton_71.setObjectName("pushButton_71")

        self.pushButton_72 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_72.setGeometry(QtCore.QRect(170, 250, 71, 31))
        self.pushButton_72.setObjectName("pushButton_72")

        self.pushButton_73 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_73.setGeometry(QtCore.QRect(250, 250, 71, 31))
        self.pushButton_73.setObjectName("pushButton_73")

        self.pushButton_74 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_74.setGeometry(QtCore.QRect(330, 250, 71, 31))
        self.pushButton_74.setObjectName("pushButton_74")

        self.pushButton_75 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_75.setGeometry(QtCore.QRect(10, 290, 71, 31))
        self.pushButton_75.setObjectName("pushButton_75")

        self.pushButton_76 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_76.setGeometry(QtCore.QRect(90, 290, 71, 31))
        self.pushButton_76.setObjectName("pushButton_76")

        self.pushButton_77 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_77.setGeometry(QtCore.QRect(170, 290, 71, 31))
        self.pushButton_77.setObjectName("pushButton_77")

        self.pushButton_78 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_78.setGeometry(QtCore.QRect(250, 290, 71, 31))
        self.pushButton_78.setObjectName("pushButton_78")

        self.pushButton_79 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_79.setGeometry(QtCore.QRect(330, 290, 71, 31))
        self.pushButton_79.setObjectName("pushButton_79")

        self.pushButton_80 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_80.setGeometry(QtCore.QRect(10, 330, 71, 31))
        self.pushButton_80.setObjectName("pushButton_80")

        self.pushButton_81 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_81.setGeometry(QtCore.QRect(90, 330, 71, 31))
        self.pushButton_81.setObjectName("pushButton_81")

        self.pushButton_82 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_82.setGeometry(QtCore.QRect(170, 330, 71, 31))
        self.pushButton_82.setObjectName("pushButton_82")

        self.pushButton_83 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_83.setGeometry(QtCore.QRect(250, 330, 71, 31))
        self.pushButton_83.setObjectName("pushButton_83")

        self.pushButton_84 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_84.setGeometry(QtCore.QRect(330, 330, 71, 31))
        self.pushButton_84.setObjectName("pushButton_84")

        self.pushButton_85 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_85.setGeometry(QtCore.QRect(10, 370, 71, 31))
        self.pushButton_85.setObjectName("pushButton_85")

        self.pushButton_86 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_86.setGeometry(QtCore.QRect(90, 370, 71, 31))
        self.pushButton_86.setObjectName("pushButton_86")

        self.pushButton_87 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_87.setGeometry(QtCore.QRect(170, 370, 71, 31))
        self.pushButton_87.setObjectName("pushButton_87")

        self.pushButton_88 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_88.setGeometry(QtCore.QRect(250, 370, 71, 31))
        self.pushButton_88.setObjectName("pushButton_88")

        self.pushButton_89 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_89.setGeometry(QtCore.QRect(330, 370, 71, 31))
        self.pushButton_89.setObjectName("pushButton_89")

        self.pushButton_90 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_90.setGeometry(QtCore.QRect(10, 410, 71, 31))
        self.pushButton_90.setObjectName("pushButton_90")

        self.pushButton_91 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_91.setGeometry(QtCore.QRect(90, 410, 71, 31))
        self.pushButton_91.setObjectName("pushButton_91")

        self.pushButton_92 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_92.setGeometry(QtCore.QRect(170, 410, 71, 31))
        self.pushButton_92.setObjectName("pushButton_92")

        self.pushButton_93 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_93.setGeometry(QtCore.QRect(250, 410, 71, 31))
        self.pushButton_93.setObjectName("pushButton_93")

        self.pushButton_99 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_99.setGeometry(QtCore.QRect(330, 410, 71, 31))
        self.pushButton_99.setObjectName("pushButton_99")

        self.pushButton_100 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_100.setGeometry(QtCore.QRect(10, 450, 71, 31))
        self.pushButton_100.setObjectName("pushButton_100")

        self.pushButton_101 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_101.setGeometry(QtCore.QRect(90, 450, 71, 31))
        self.pushButton_101.setObjectName("pushButton_101")

        self.pushButton_102 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_102.setGeometry(QtCore.QRect(170, 450, 71, 31))
        self.pushButton_102.setObjectName("pushButton_102")

        self.pushButton_103 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_103.setGeometry(QtCore.QRect(250, 450, 71, 31))
        self.pushButton_103.setObjectName("pushButton_103")

        self.pushButton_104 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_104.setGeometry(QtCore.QRect(330, 450, 71, 31))
        self.pushButton_104.setObjectName("pushButton_104")

        self.pushButton_105 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_105.setGeometry(QtCore.QRect(10, 490, 71, 31))
        self.pushButton_105.setObjectName("pushButton_105")

        self.pushButton_106 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_106.setGeometry(QtCore.QRect(90, 490, 71, 31))
        self.pushButton_106.setObjectName("pushButton_106")

        self.pushButton_107 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_107.setGeometry(QtCore.QRect(170, 490, 71, 31))
        self.pushButton_107.setObjectName("pushButton_107")

        self.pushButton_108 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_108.setGeometry(QtCore.QRect(250, 490, 71, 31))
        self.pushButton_108.setObjectName("pushButton_108")

        self.pushButton_109 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_109.setGeometry(QtCore.QRect(330, 490, 71, 31))
        self.pushButton_109.setObjectName("pushButton_109")

        self.pushButton_110 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_110.setGeometry(QtCore.QRect(10, 530, 71, 31))
        self.pushButton_110.setObjectName("pushButton_110")

        self.pushButton_111 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_111.setGeometry(QtCore.QRect(90, 530, 71, 31))
        self.pushButton_111.setObjectName("pushButton_111")

        self.pushButton_112 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_112.setGeometry(QtCore.QRect(170, 530, 71, 31))
        self.pushButton_112.setObjectName("pushButton_112")

        self.pushButton_113 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_113.setGeometry(QtCore.QRect(250, 530, 71, 31))
        self.pushButton_113.setObjectName("pushButton_113")

        self.pushButton_114 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_114.setGeometry(QtCore.QRect(330, 530, 71, 31))
        self.pushButton_114.setObjectName("pushButton_114")

        self.tabWidget.addTab(self.tab_5, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")

        self.label = QtWidgets.QLabel(self.tab_2)
        self.label.setGeometry(QtCore.QRect(20, 0, 400, 100))
        self.label.setStyleSheet('font: 10pt "Segoe UI";')
        self.label.setObjectName("label")

        self.tabWidget.addTab(self.tab_2, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.lineEdit_tlg_bot = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_tlg_bot.setGeometry(QtCore.QRect(20, 150, 250, 20))
        self.lineEdit_tlg_bot.setObjectName("lineEdit")
        # self.lineEdit_tlg_bot.textChanged.connect(self._android)

        self.label_tlg_bot = QtWidgets.QLabel(self.tab_2)
        self.label_tlg_bot.setGeometry(QtCore.QRect(280, 150, 150, 20))
        self.label_tlg_bot.setObjectName("label_android")

        self.lineEdit_tlg_admin = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_tlg_admin.setGeometry(QtCore.QRect(20, 100, 250, 20))
        self.lineEdit_tlg_admin.setObjectName("lineEdit")
        # self.lineEdit_tlg_admin.textChanged.connect(self._android)

        self.label_tlg_admin = QtWidgets.QLabel(self.tab_2)
        self.label_tlg_admin.setGeometry(QtCore.QRect(280, 100, 150, 20))
        self.label_tlg_admin.setObjectName("label_android")

        self.checkBox_tg = QtWidgets.QCheckBox(self.tab_2)
        self.checkBox_tg.setGeometry(QtCore.QRect(20, 190, 41, 41))
        self.checkBox_tg.setObjectName("checkBox_send_emotion")
        # self.checkBox_tg.stateChanged.connect(self._checkBox_debug)

        self.label_tg = QtWidgets.QLabel(self.tab_2)
        self.label_tg.setGeometry(QtCore.QRect(70, 200, 150, 20))
        self.label_tg.setObjectName("label_debug")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Leninka Bot CR"))
        MainWindow.setWindowIcon(QtGui.QIcon("img/Leninka.ico"))
        self.pushButton_5.setText(_translate("MainWindow", "Open \nChest 1"))
        self.pushButton_6.setText(_translate("MainWindow", "Open \nChest 2"))
        self.pushButton_7.setText(_translate("MainWindow", "Open \nChest 3"))
        self.pushButton_8.setText(_translate("MainWindow", "Open \nChest 4"))
        self.pushButton_9.setText(_translate("MainWindow", "Return\nHome"))
        self.pushButton_10.setText(_translate("MainWindow", "Go To\nClan Chat"))
        self.pushButton_11.setText(_translate("MainWindow", "Open\Close\nClan Chat"))
        self.pushButton_12.setText(_translate("MainWindow", "Go To\nDeck"))
        self.pushButton_13.setText(_translate("MainWindow", "GoTo\nShop"))
        self.pushButton_14.setText(_translate("MainWindow", "Set English \nLanguage"))
        self.pushButton_15.setText(_translate("MainWindow", "Reboot"))
        self.pushButton_16.setText(_translate("MainWindow", "Open CR"))
        self.pushButton_17.setText(_translate("MainWindow", "Close CR"))
        self.pushButton_18.setText(_translate("MainWindow", "Swipe Card\nRequest"))
        self.pushButton_19.setText(_translate("MainWindow", "Request\nCard"))
        self.pushButton_20.setText(_translate("MainWindow", "reward\nLimit"))
        self.pushButton_21.setText(_translate("MainWindow", "run Battle\nGlobal"))
        self.pushButton_22.setText(_translate("MainWindow", "run Battle \n Mode 1"))
        self.pushButton_23.setText(_translate("MainWindow", "run Battle \n Mode 2"))
        self.pushButton_24.setText(_translate("MainWindow", "change \n account"))
        self.pushButton_25.setText(_translate("MainWindow", "Request\nCard"))
        self.pushButton_26.setText(_translate("MainWindow", "Open\nPassRoyale"))
        self.pushButton_27.setText(_translate("MainWindow", "Swipe\nShop"))
        self.pushButton_28.setText(_translate("MainWindow", "28"))
        self.pushButton_29.setText(_translate("MainWindow", "29"))
        self.pushButton_30.setText(_translate("MainWindow", "30"))
        self.pushButton_31.setText(_translate("MainWindow", "31"))
        self.pushButton_32.setText(_translate("MainWindow", "32"))
        self.pushButton_33.setText(_translate("MainWindow", "33"))
        self.pushButton_34.setText(_translate("MainWindow", "34"))
        self.pushButton_69.setText(_translate("MainWindow", "69"))
        self.pushButton_70.setText(_translate("MainWindow", "70"))
        self.pushButton_71.setText(_translate("MainWindow", "71"))
        self.pushButton_72.setText(_translate("MainWindow", "72"))
        self.pushButton_73.setText(_translate("MainWindow", "73"))
        self.pushButton_74.setText(_translate("MainWindow", "74"))
        self.pushButton_75.setText(_translate("MainWindow", "74"))
        self.pushButton_76.setText(_translate("MainWindow", "76"))
        self.pushButton_77.setText(_translate("MainWindow", "77"))
        self.pushButton_78.setText(_translate("MainWindow", "78"))
        self.pushButton_79.setText(_translate("MainWindow", "79"))
        self.pushButton_80.setText(_translate("MainWindow", "80"))
        self.pushButton_81.setText(_translate("MainWindow", "81"))
        self.pushButton_82.setText(_translate("MainWindow", "82"))
        self.pushButton_83.setText(_translate("MainWindow", "83"))
        self.pushButton_84.setText(_translate("MainWindow", "84"))
        self.pushButton_85.setText(_translate("MainWindow", "85"))
        self.pushButton_86.setText(_translate("MainWindow", "86"))
        self.pushButton_87.setText(_translate("MainWindow", "87"))
        self.pushButton_88.setText(_translate("MainWindow", "88"))
        self.pushButton_89.setText(_translate("MainWindow", "89"))
        self.pushButton_90.setText(_translate("MainWindow", "90"))
        self.pushButton_91.setText(_translate("MainWindow", "91"))
        self.pushButton_92.setText(_translate("MainWindow", "92"))
        self.pushButton_93.setText(_translate("MainWindow", "93"))
        self.pushButton_99.setText(_translate("MainWindow", "99"))
        self.pushButton_100.setText(_translate("MainWindow", "100"))
        self.pushButton_101.setText(_translate("MainWindow", "101"))
        self.pushButton_102.setText(_translate("MainWindow", "102"))
        self.pushButton_103.setText(_translate("MainWindow", "103"))
        self.pushButton_104.setText(_translate("MainWindow", "104"))
        self.pushButton_105.setText(_translate("MainWindow", "105"))
        self.pushButton_106.setText(_translate("MainWindow", "106"))
        self.pushButton_107.setText(_translate("MainWindow", "107"))
        self.pushButton_108.setText(_translate("MainWindow", "108"))
        self.pushButton_109.setText(_translate("MainWindow", "109"))
        self.pushButton_110.setText(_translate("MainWindow", "110"))
        self.pushButton_111.setText(_translate("MainWindow", "111"))
        self.pushButton_112.setText(_translate("MainWindow", "112"))
        self.pushButton_113.setText(_translate("MainWindow", "113"))
        self.pushButton_114.setText(_translate("MainWindow", "114"))

    def debugButton(self):
        self.pushButton_5.clicked.connect(lambda: self.bot.bot.openChest(1))
        self.pushButton_6.clicked.connect(lambda: self.bot.bot.openChest(2))
        self.pushButton_7.clicked.connect(lambda: self.bot.bot.openChest(3))
        self.pushButton_8.clicked.connect(lambda: self.bot.bot.openChest(4))
        self.pushButton_9.clicked.connect(lambda: self.bot.bot.returnHome())
        self.pushButton_10.clicked.connect(lambda: self.bot.bot.goToClanChat())
        self.pushButton_11.clicked.connect(lambda: self.bot.bot.openCloseClanChat())
        self.pushButton_12.clicked.connect(lambda: self.bot.bot.goToDeck())
        self.pushButton_13.clicked.connect(lambda: self.bot.bot.goToShop())
        self.pushButton_14.clicked.connect(lambda: self.bot.bot.setEnglishLanguage())
        self.pushButton_15.clicked.connect(lambda: self.bot.bot.reboot())
        self.pushButton_16.clicked.connect(lambda: self.bot.bot.openCR())
        self.pushButton_17.clicked.connect(lambda: self.bot.bot.closeCR())
        self.pushButton_18.clicked.connect(lambda: self.bot.bot.swipeRequestCard())
        self.pushButton_19.clicked.connect(lambda: self.bot.bot.requestCard())
        self.pushButton_20.clicked.connect(lambda: self.bot.bot.rewardLimit())
        self.pushButton_21.clicked.connect(lambda: self.bot.bot.runBattleGlobal())
        self.pushButton_22.clicked.connect(lambda: self.bot.bot.runBattleMode(1))
        self.pushButton_23.clicked.connect(lambda: self.bot.bot.runBattleMode(2))
        self.pushButton_24.clicked.connect(
            lambda: self.bot.bot.changeAccount(
                self.thread.number_account, self._total_accounts
            )
        )
        self.pushButton_25.clicked.connect(
            lambda: self.bot.bot.requestCard(self.id_card)
        )
        self.pushButton_26.clicked.connect(lambda: self.bot.bot.open_pass_royale())
        self.pushButton_27.clicked.connect(lambda: self.bot.bot.get_shop_reward())

    def startStopFarm(self):
        _translate = QtCore.QCoreApplication.translate
        if self.farm:
            self.farm = False
            self.pushButton.setText(
                _translate("MainWindow", self.language_set_words[0])
            )
        else:
            self.farm = True
            self.pushButton.setText(
                _translate("MainWindow", self.language_set_words[1])
            )
        self.thread.start_farm(
            self._mode,
            self.open_chest,
            self.request_card,
            self.port,
            self._changed_account,
            self._change_account,
            self._total_accounts,
            self.id_card,
            self.play_clan_war,
            self.change_deck,
            self.number_fights_deck_change,
            self.send_emotion,
            self.reboot_index,
            self.android,
            self.forever_elexir,
            self.number_of_finish,
            self.time_break,
            self.open_PR,
            self.debug,
            self.token,
            self.tg_user,
            self.activ_tg_bot,
            self.use_chest_key,
            self.donate_card,
            self.battle_change_account,
        )
        self.bot = self.thread.bot

    def getTrigger(self):
        if self.bot == None:
            self.thread.update_server(
                self._mode,
                self.open_chest,
                self.request_card,
                self.port,
                self._changed_account,
                self._change_account,
                self._total_accounts,
                self.id_card,
                self.play_clan_war,
                self.change_deck,
                self.number_fights_deck_change,
                self.send_emotion,
                self.reboot_index,
                self.android,
                self.forever_elexir,
                self.number_of_finish,
                self.time_break,
                self.open_PR,
                self.debug,
                self.token,
                self.tg_user,
                self.activ_tg_bot,
                self.use_chest_key,
                self.donate_card,
                self.battle_change_account,
            )
            self.bot = self.thread.bot
        trigger = ImageTriggers(True, True)
        x = trigger.getTriggerDEBUG(self.bot.bot.getScreen())

        string_debug = ""
        for i in x:
            for j in i:
                string_debug += str(j)
            string_debug += "\n"
        self.thread._textBrowser_3 = "Получен тригер: " + string_debug + "\n"
        self.textBrowser_3.setText(self._textBrowser_3)

    def reboot(self):
        if self.bot == None:
            self.textBrowser_3.setText("На данный момент не запущен бот")
            return 0
        self.bot.bot.reboot()

    def logCrown(self, crown):
        if self.textBrowser_2.toPlainText() == crown:
            return
        self.textBrowser_2.setText(crown)

    def logEvent(self, event):
        if self.textBrowser_3.toPlainText() == event:
            return
        self.textBrowser_3.setText(event)

    def logStatistic(self, stata):
        if self.textBrowser.toPlainText() == stata:
            return
        self.textBrowser.setText(stata)

    def currentTextComboBox_1(self, text):
        logger.debug(f"Был установлен режим: {text}")
        self._mode = text
        self.config["Combat_mode"] = self._mode
        self.dump_setting()

    def currentTextComboBox_2(self, text):
        self._card_request = text
        self.id_card = self.list_card_request.index(text)
        logger.debug(f"Была установлен карта запроса: {text}, {self.id_card}")
        self.config["id_card"] = self.id_card
        self.dump_setting()
        self.label_img.setPixmap(QPixmap(f"Cards/{text}.png"))

    def currentTextComboBox_0000(self, text):
        self._card_request = text
        self.id_card_epic = self.list_card_request_epic.index(text)
        logger.debug(f"Была установлен карта запроса: {text}, {self.id_card_epic}")
        self.config["id_card_epic"] = self.id_card_epic
        self.dump_setting()
        self.label_img_epic.setPixmap(QPixmap(f"Cards/{text}.png"))

    def openChest(self, event):
        logger.debug(f"Был изменен параметр открытия сундуков на: {event}")
        self.open_chest = bool(event)
        self.config["Open_chests"] = bool(self.open_chest)
        self.dump_setting()

    def openPR(self, event):
        logger.debug(f"Был изменен параметр открытия сундуков на: {event}")
        self.open_PR = bool(event)
        self.config["Open_PR"] = bool(self.open_PR)
        self.dump_setting()

    def d_use_key_chest(self, event):
        logger.debug(f"Был изменен параметр открытия сундуков на: {event}")
        self.use_key_chest = bool(event)
        self.config["use_key_chest"] = bool(self.use_key_chest)
        self.dump_setting()

    def requestCard(self, event):
        logger.debug(f"Был изменен параметр запроса карт на: {event}")
        self.request_card = bool(event)
        self.config["Request_cards"] = bool(self.request_card)
        self.dump_setting()

    def adbPort(self, value):
        self.port = value
        self.config["port_adb"] = self.port
        self.dump_setting()
        logger.debug(f"Был изменен параметр порт подключения на: {value}")

    def _android(self, value):
        self.android = value
        self.config["android"] = self.android
        self.dump_setting()
        logger.debug(f"Был изменен параметр порт подключения на: {value}")

    def set_change_account(self, value):
        self.thread.number_account = value
        self.config["Selected_account"] = self.thread.number_account
        self.dump_setting()
        logger.debug(f"Был изменен параметр выбранный аккаунт на: {value}")

    def set_total_accounts(self, value):
        self._total_accounts = value
        self.config["total_accounts"] = self._total_accounts
        self.dump_setting()
        logger.debug(f"Был изменен параметр всего аккаунтов на: {value}")

    def set_battle_change_account(self, value):
        self.battle_change_account = value
        self.config["battle_change_account"] = self.battle_change_account
        self.dump_setting()
        logger.debug(f"Был изменен параметр боев до смены на: {value}")

    def currentTextComboBox_change_language(self, language):
        if language == "Русский":
            self.language = "Russian"
        elif language == "English":
            self.language = "English"
        elif language == "Deutsch":
            self.language = "German"
        elif language == "Español":
            self.language = "Spanish"
        elif language == "中国人":
            self.language = "Chinese"
        elif language == "Français":
            self.language = "French"
        elif language == "日本":
            self.language = "Japanese"
        elif language == "Italiano":
            self.language = "Italian"
        elif language == "čeština":
            self.language = "Czech"
        elif language == "Português":
            self.language = "Portuguese"
        elif language == "":
            self.language = "English"
        self.config["Language"] = language
        self.dump_setting()
        self.language_set_words = []
        with open(f"Languages/{self.language}.txt", "r", encoding="UTF-8") as f:
            while True:
                line = f.readline()
                if not line:
                    break
                self.language_set_words.append(line)

        _translate = QtCore.QCoreApplication.translate
        self.pushButton.setText(_translate("MainWindow", self.language_set_words[0]))
        self.pushButton_2.setText(
            _translate("MainWindow", self.language_set_words[2]).replace("_", "\n")
        )
        self.pushButton_3.setText(
            _translate("MainWindow", self.language_set_words[3]).replace("_", "\n")
        )
        self.label_2.setText(_translate("MainWindow", self.language_set_words[4]))
        self.label_3.setText(_translate("MainWindow", self.language_set_words[5]))
        self.label_4.setText(_translate("MainWindow", self.language_set_words[6]))
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.Log),
            _translate("MainWindow", self.language_set_words[7]),
        )
        self.label_openChest.setText(
            _translate("MainWindow", self.language_set_words[8])
        )
        self.label_requestCard.setText(
            _translate("MainWindow", self.language_set_words[9])
        )
        self.label_5.setText(_translate("MainWindow", self.language_set_words[10]))
        self.label_change_language.setText(
            _translate("MainWindow", self.language_set_words[11])
        )
        self.label_8.setText(_translate("MainWindow", self.language_set_words[12]))
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.tab_3),
            _translate("MainWindow", self.language_set_words[13]),
        )
        self.label_9.setText(_translate("MainWindow", self.language_set_words[14]))
        self.label_10.setText(_translate("MainWindow", self.language_set_words[15]))
        self.label_11.setText(_translate("MainWindow", self.language_set_words[16]))
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.tab_4),
            _translate("MainWindow", self.language_set_words[17]),
        )
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.tab_5),
            _translate("MainWindow", self.language_set_words[18]),
        )
        self.label.setText(
            _translate(
                "MainWindow",
                f"<body><p>{self.language_set_words[19]} Clash Royale</p><p>BugReport:  <a href=t.me/Sergey_p7>t.me/Sergey_p7</a></p><p>Telegram:  <a href=https://t.me/bot_Clash_Royale>https://t.me/bot_Clash_Royale</a></p></body>",
            )
        )
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.tab_2),
            _translate("MainWindow", self.language_set_words[20]),
        )
        self.label_changed_account.setText(
            _translate("MainWindow", self.language_set_words[21])
        )
        self.label_change_account.setText(
            _translate("MainWindow", self.language_set_words[22])
        )
        self.label_total_accounts.setText(
            _translate("MainWindow", self.language_set_words[23])
        )
        self.label_clan_var.setText(_translate("MainWindow", "Play clan war"))
        self.label_.setText(_translate("MainWindow", "Battle:"))
        self.checkBox_shop_reward.setText(
            _translate("MainWindow", "Get Reward in Shop")
        )
        self.label_change_deck.setText(_translate("MainWindow", "Change deck"))
        self.label_deck_number.setText(_translate("MainWindow", "Deck number"))
        self.label_number_fights_deck_change.setText(
            _translate("MainWindow", "Number of fights before deck change")
        )
        self.label_send_emotion.setText(
            _translate("MainWindow", "Send emoji during combat")
        )
        self.label_epic.setText(_translate("MainWindow", "Epic cart Request"))
        self.label_android.setText(_translate("MainWindow", "path to .exe"))
        self.label_forever_elexir.setText(_translate("MainWindow", "Forever elixir"))
        self.label_PR.setText(_translate("MainWindow", "Open Pass Royale"))
        self.label_debug.setText(_translate("MainWindow", "Collect Data Set"))
        self.label_tlg_bot.setText(_translate("MainWindow", "Token tlg"))
        self.label_tlg_admin.setText(_translate("MainWindow", "tlg admin"))
        self.label_tg.setText(_translate("MainWindow", "tlg activ"))
        self.label_donate_card.setText(_translate("MainWindow", "Donate card"))
        self.label_use_key_chest.setText(_translate("MainWindow", "Use key chest"))
        self.label_battle_change_account.setText(_translate("MainWindow", "Battle change account"))

    def on_change(self, v):
        if int(self.thread.number_account) == int(self.spinBox_change_account.value()):
            return
        logger.debug(f"Был изменен параметр номера аккаунта: {v}")
        self.spinBox_change_account.setValue(int(self.thread.number_account))

    def changed_account(self, v):
        logger.debug(f"Был изменен параметр смены аккаунта: {v}")
        self._changed_account = v
        self.config["Change_accounts"] = bool(self._changed_account)
        self.dump_setting()

    def d_donate_card(self, v):
        logger.debug(f"Был изменен параметр смены аккаунта: {v}")
        self.donate_card = v
        self.config["donate_card"] = bool(self.donate_card)
        self.dump_setting()

    def debug(self, text):
        print(text, type(text))

    def numberOfFinish(self, value):
        logger.debug(f"Был изменен параметр колличество боев до перерыва: {value}")
        self.number_of_finish = value
        self.config["number_of_finish"] = self.number_of_finish
        self.dump_setting()

    def timeBreak(self, value):
        logger.debug(f"Был изменен параметр сна: {value}")
        self.time_break = value
        self.config["time_break"] = self.time_break
        self.dump_setting()

    def load_setting(self, config):
        _translate = QtCore.QCoreApplication.translate
        self.comboBox_change_language.setCurrentIndex(
            self.list_change_language.index(config["Language"])
        )
        self.lineEdit.setText(_translate("MainWindow", str(config["port_adb"])))
        self.spinBox.setValue(config["number_of_finish"])
        self.spinBox_2.setValue(config["time_break"])
        self.comboBox.setCurrentIndex(self.list_mode.index(config["Combat_mode"]))
        self.id_card = config["id_card"]
        self.comboBox_2.setCurrentIndex(self.id_card)
        self.spinBox_change_account.setValue(config["Selected_account"])
        self.spinBox_total_accounts.setValue(config["total_accounts"])
        self.spinBox_battle_change_account.setValue(config["battle_change_account"])
        self.id_card_epic = config["id_card_epic"]
        self.comboBox_2_epic.setCurrentIndex(self.id_card_epic)

        if config["Change_accounts"]:
            self.checkBox_changed_account.click()

        if config["Open_chests"]:
            self.checkBox_openChest.click()

        if config["Request_cards"]:
            self.checkBox_requestCard.click()

        if config["play_clan_war"]:
            self.checkBox_clan_var.click()

        if config["Open_PR"]:
            self.checkBox_PR.click()

        if config["forever_elexir"]:
            self.checkBox_forever_elexir.click()

        self.spinBox_deck_number.setValue(config["deck_number"])

        if config["change_deck"]:
            self.checkBox_change_deck.click()

        self.spinBox_deck_number.setValue(config["deck_number"])
        self.spinBox_number_fights_deck_change.setValue(
            config["number_fights_deck_change"]
        )

        if config["send_emotion"]:
            self.checkBox_send_emotion.click()

        if config["debug"]:
            self.checkBox_debug.click()

        if config["use_key_chest"]:
            self.checkBox_use_key_chest.click()

        if config["donate_card"]:
            self.checkBox_donate_card.click()

        self.lineEdit_android.setText(_translate("MainWindow", str(config["android"])))

    def dump_setting(self):
        with open("config/custom.json", "w") as outfile:
            json.dump(self.config, outfile)

    def clan_war(self, event):
        logger.debug(f"Был изменен параметр клановых войн: {event}")
        self.play_clan_war = bool(event)
        self.config["play_clan_war"] = self.play_clan_war
        self.dump_setting()

    def on_change_2(self, v):
        if self.spinBox_deck_number.value() == int(v):
            return
        logger.debug(f"Был изменен параметр номер колоды на: {v}")
        self.spinBox_deck_number.setValue(v)

    def _spinBox_deck_number(self, value):
        self.thread.number_deck = self.spinBox_deck_number.value()
        self.deck_number = self.spinBox_deck_number.value()
        self.config["deck_number"] = self.deck_number
        self.dump_setting()
        logger.debug(f"Был изменен параметр номер колоды на: {value}")

    def _checkBox_change_deck(self, v):
        logger.debug(f"Был изменен параметр смены колоды на: {v}")
        self.change_deck = v
        self.config["change_deck"] = bool(self.change_deck)
        self.dump_setting()

    def _spinBox_number_fights_deck_change(self, value):
        self.number_fights_deck_change = value
        self.config["number_fights_deck_change"] = self.number_fights_deck_change
        self.dump_setting()
        logger.debug(f"Был изменен параметр номер колоды на: {value}")

    def _checkBox_send_emotion(self, v):
        logger.debug(f"Был изменен параметр смены колоды на: {v}")
        self.send_emotion = bool(v)
        self.config["send_emotion"] = bool(self.send_emotion)
        self.dump_setting()

    def _checkBox_debug(self, v):
        logger.debug(f"Был изменен параметр смены колоды на: {v}")
        self.debug = bool(v)
        self.config["debug"] = bool(self.debug)
        self.dump_setting()

    def _forever_elexir(self, event):
        logger.debug(f"Был изменен бесконечного эликсира: {event}")
        self.forever_elexir = bool(event)
        self.config["forever_elexir"] = bool(self.forever_elexir)
        self.dump_setting()
